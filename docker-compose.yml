version: "3.8"

services:
  postgres-auth:
    image: postgres:14
    container_name: postgres-auth
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_DB_NAME}
    command: ["postgres", "-c", "port=${AUTH_DB_PORT}"]
    ports:
      - "${AUTH_DB_PORT}:${AUTH_DB_PORT}"
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data

  postgres-inventory:
    image: postgres:14
    container_name: postgres-inventory
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${INVENTORY_DB_USER}
      POSTGRES_PASSWORD: ${INVENTORY_DB_PASSWORD}
      POSTGRES_DB: ${INVENTORY_DB_NAME}
    command: ["postgres", "-c", "port=${INVENTORY_DB_PORT}"]
    ports:
      - "${INVENTORY_DB_PORT}:${INVENTORY_DB_PORT}"
    volumes:
      - postgres-inventory-data:/var/lib/postgresql/data

  postgres-item-catalog:
    image: postgres:14
    container_name: postgres-item-catalog
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${ITEM_CATALOG_DB_USER}
      POSTGRES_PASSWORD: ${ITEM_CATALOG_DB_PASSWORD}
      POSTGRES_DB: ${ITEM_CATALOG_DB_NAME}
    command: ["postgres", "-c", "port=${ITEM_CATALOG_DB_PORT}"]
    ports:
      - "${ITEM_CATALOG_DB_PORT}:${ITEM_CATALOG_DB_PORT}"
    volumes:
      - postgres-item-catalog-data:/var/lib/postgresql/data

  postgres-transaction:
    image: postgres:14
    container_name: postgres-transaction
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${TRANSACTION_DB_USER}
      POSTGRES_PASSWORD: ${TRANSACTION_DB_PASSWORD}
      POSTGRES_DB: ${TRANSACTION_DB_NAME}
    command: ["postgres", "-c", "port=${TRANSACTION_DB_PORT}"]
    ports:
      - "${TRANSACTION_DB_PORT}:${TRANSACTION_DB_PORT}"
    volumes:
      - postgres-transaction-data:/var/lib/postgresql/data

  redis:
    image: redis:7
    container_name: system-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    env_file:
      - .env
    ports:
      - "6379:6379"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: system-rabbitmq
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: elasticsearch
    env_file:
      - .env
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms${ELASTICSEARCH_HEAP} -Xmx${ELASTICSEARCH_HEAP}
    ports:
      - "${ELASTICSEARCH_HTTP_PORT}:9200"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.10
    container_name: kibana
    depends_on:
      - elasticsearch
    env_file:
      - .env
    environment:
      - ELASTICSEARCH_HOSTS=http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_HTTP_PORT}
    ports:
      - "${KIBANA_PORT}:5601"

  platform-auth:
    image: node:20-alpine
    container_name: platform-auth
    working_dir: /app
    volumes:
      - ./platform-auth:/app
      - /app/node_modules
    env_file:
      - .env
    ports:
      - "3001:3001"
    command: >
      sh -c "npm install --legacy-peer-deps && npx prisma migrate deploy && npx prisma generate && npx prisma db seed && npm run start:dev"

  platform-inventory:
    image: node:20-alpine
    container_name: platform-inventory
    working_dir: /app
    volumes:
      - ./platform-inventory:/app
      - /app/node_modules
    env_file:
      - .env
    ports:
      - "3004:3004"
    command: >
      sh -c "npm install --legacy-peer-deps && npx prisma migrate deploy && npx prisma generate && npx prisma db seed && npm run start:dev"

  platform-item-catalog:
    image: node:20-alpine
    container_name: platform-item-catalog
    working_dir: /app
    volumes:
      - ./platform-item-catalog:/app
      - /app/node_modules
    env_file:
      - .env
    ports:
      - "3002:3002"
    command: >
      sh -c "npm install --legacy-peer-deps && npx prisma migrate deploy && npx prisma generate && npx prisma db seed && npm run start:dev"

  platform-transaction:
    image: node:20-alpine
    container_name: platform-transaction
    working_dir: /app
    volumes:
      - ./platform-transaction:/app
      - /app/node_modules
    env_file:
      - .env
    ports:
      - "3003:3003"
    command: >
      sh -c "npm install --legacy-peer-deps && npx ts-node src/elastic-search-migrations/elastic-search-init-index.ts && npm run start:dev"

  backend-for-frontend:
    image: node:20-alpine
    container_name: backend-for-frontend
    working_dir: /app
    volumes:
      - ./backend-for-frontend:/app
      - /app/node_modules
    env_file:
      - .env
    ports:
      - "3005:3005"
    depends_on:
      - platform-auth
      - platform-inventory
      - platform-item-catalog
      - platform-transaction
    command: >
      sh -c "npm install --legacy-peer-deps && npm run start:dev"

volumes:
  postgres-auth-data:
  postgres-inventory-data:
  postgres-item-catalog-data:
  postgres-transaction-data:
